import React from 'react'

function Props() {
  return (
    <div className="wrapper">
      <h1 className='h1'>Пропсы можно только читать</h1>
      <p className='p'>Компонент никогда не должен что-то записывать в свои пропсы — вне зависимости от того, функциональный он или классовый.</p>
      <p className='p'>Возьмём для примера функцию sum:</p>
      <pre>
        <code>{`
function sum(a, b) {
  return a + b;
}
        `}
        </code>
      </pre>
      <p className='p'>
        Такие функции называют «чистыми», потому что они не меняют свои входные данные и предсказуемо возвращают один и тот же результат для одинаковых аргументов.
      </p>
      <p className='p'>
        А вот пример нечистой функции — она записывает данные в свои же аргументы:
      </p>
      <pre>
        <code>{`
function withdraw(account, amount) {
  account.total -= amount;
}
        `}
        </code>
      </pre>
      <p className='p font_bold'>
        React достаточно гибкий, но есть одно правило, которое нельзя нарушать:
      </p>
      <p className='p'>
        React-компоненты обязаны вести себя как чистые функции по отношению к своим пропсам.
      </p>
      <p className='p'>
        Конечно, интерфейсы приложений обычно изменяются с течением времени. В следующей главе мы узнаем о том, что такое «состояние» компонента. Состояние даёт компонентам возможность реагировать на действия пользователя, ответы сервера и другие события, не нарушая чистоту компонента.
      </p>


    </div>
  )
}

export default Props